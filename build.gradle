plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'com.diffplug.gradle.spotless' version '3.10.0' apply false
}

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'jacoco'

subprojects {
    group = 'com.greenlight'

    repositories {
        mavenCentral()
        jcenter()
        maven { url = uri("https://repo.spring.io/milestone") }
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.gradle.spotless'

    sourceCompatibility = JavaVersion.VERSION_11

    dependencies {
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    }

    test {
        useJUnitPlatform()
    }

    spotless {
        enforceCheck = false
        kotlin {

        }
    }

    jacocoTestReport {
        reports {
            html.enabled = false
        }
    }
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.5
                }
            }
        }
    }

    check.dependsOn jacocoTestReport
}

/**
 * Task to merge all binary (*.exec) files to a global report
 */
task jacocoMergeTest(type: JacocoReport) {
    def classTree = project.fileTree(dir: "${rootProject.projectDir}", includes: ['**/build/classes/java/main/**/*.class'])
    def sourceTree = project.fileTree(dir: "${rootProject.projectDir}", includes: ['**/src/main/java/**/*.java'])
    def executionTree = project.fileTree(dir: "${rootProject.projectDir}", include: ['**/build/jacoco/test.exec'])
    classDirectories.from files(classTree)
    sourceDirectories.from files(sourceTree)
    executionData.from files(executionTree)
    reports {
        xml.enabled = true
        xml.destination file("$project.buildDir/jacoco/report.xml")
        html.enabled = true
    }
}

task jacocoMerge(dependsOn: [jacocoMergeTest]) {}

task collectJars {
    doLast {
        def jars = project.fileTree(dir: '.', include: '**/build/libs/*.jar')
        print jars.forEach { jarArchive ->
            copy {
                from jarArchive
                into "$rootDir/build/libs"
            }
        }
    }
}
